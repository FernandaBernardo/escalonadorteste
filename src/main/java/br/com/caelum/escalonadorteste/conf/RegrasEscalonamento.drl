import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import java.time.LocalDate;

import br.com.caelum.escalonadorteste.modelo.Configuracao
import br.com.caelum.escalonadorteste.modelo.Turma
import br.com.caelum.escalonadorteste.modelo.Instrutor

import java.util.ArrayList;

global HardSoftScoreHolder scoreHolder;

rule "não sabe dar o curso"
    when
    	Turma(instrutor != null, !instrutor.sabeDarOCurso(this))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "não consegue dar aula no período"
    when
    	Turma(instrutor != null, !instrutor.consegueDarAulaNoPeriodo(this))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "mais de X horas de aula"
	when
		$config : Configuracao()
		$instrutor : Instrutor()
		Number(intValue > $config.numeroMaximoDeHorasPorInstrutor) from 
			accumulate($turma : Turma(instrutor == $instrutor); sum($turma.getCargaHoraria())) 
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -10);
end

rule "data de um curso conflita com outro"
	when
		$outraTurma : Turma($instrutor : instrutor != null)
		Turma($outraTurma != this, instrutor == $instrutor, dataConflitaCom($outraTurma))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "mais de X turmas seguidas"
	when
		$config : Configuracao()
		$instrutor : Instrutor()
		Number(intValue > $config.numeroMaximoDeTurmasSeguidas) from
			accumulate($turma : Turma(instrutor == $instrutor), maximoDeTurmasSeguidas($turma))
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -10);	
end

