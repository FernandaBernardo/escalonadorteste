package escalonador.parametros

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import java.time.LocalDate;

import br.com.caelum.escalonadorteste.conf.ParametrosDeEscalonamento
import br.com.caelum.escalonadorteste.modelo.Turma
import br.com.caelum.escalonadorteste.modelo.Instrutor
import br.com.caelum.escalonadorteste.modelo.Curso
import br.com.caelum.escalonadorteste.modelo.Periodo

import java.util.ArrayList

import accumulate br.com.caelum.escalonadorteste.funcao.AcumuladorDeMaximoDeTurmasSeguidas maximoDeTurmasSeguidas

global HardSoftScoreHolder scoreHolder;

rule "não sabe dar o curso"
    when
    	Turma(instrutor != null, !instrutor.sabeDarOCurso(this))
    then
    	scoreHolder.penalize(kcontext);
end

rule "não consegue dar aula no período"
    when
    	Turma(instrutor != null, !instrutor.consegueDarAulaNoPeriodo(this))
    then
        scoreHolder.penalize(kcontext);
end

rule "não está disponível nos dias da turma"
	when
		Turma(instrutor != null, !instrutor.estaDisponivelNosDiasDaTurma(this))
	then
		scoreHolder.penalize(kcontext);
end

rule "pegou integral e noturno simultaneamente"
	when
		$outraTurma : Turma($instrutor : instrutor != null, periodo == Periodo.INTEGRAL)
		Turma(instrutor == $instrutor, 
			periodo == Periodo.NOTURNO, 
			dataDeInicio.equals($outraTurma.dataDeInicio) || dataDeInicio.equals($outraTurma.dataDeInicio.plusWeeks(1)))
	then
		scoreHolder.penalize(kcontext);
end

rule "mais de X horas de aula"
	when
		$parametros : ParametrosDeEscalonamento()
		$instrutor : Instrutor(!isExterno())
		Number($horas : intValue > $parametros.numeroMaximoDeHorasPorInstrutor) from 
			accumulate($turma : Turma(instrutor == $instrutor) and $curso : Curso(codigo == $turma.codigoCurso); sum($curso.getCargaHoraria())) 
	then
		scoreHolder.penalize(kcontext, $horas - $parametros.getNumeroMaximoDeHorasPorInstrutor());
end

rule "data de um curso conflita com outro"
	when
		$outraTurma : Turma($instrutor : instrutor != null)
		Turma($outraTurma != this, instrutor == $instrutor, aulasConflitamCom($outraTurma))
	then
		scoreHolder.penalize(kcontext);
end

rule "mais de X turmas seguidas"
	when
		$parametros : ParametrosDeEscalonamento()
		$instrutor : Instrutor(!isExterno())
		Number(intValue > $parametros.numeroMaximoDeTurmasSeguidas) from
			accumulate($turma : Turma(instrutor == $instrutor); maximoDeTurmasSeguidas($turma))
	then
		scoreHolder.penalize(kcontext);	
end

rule "instrutor planejado foi trocado"
	when
		Turma(instrutorPlanejado != null, instrutorPlanejado != instrutor)
	then
		scoreHolder.penalize(kcontext);
end

rule "instrutor não está disponível para viagem"
	when
		Turma(instrutor != null, ehViagem, !instrutor.estaDisponivelParaViagem())
	then
		scoreHolder.penalize(kcontext); 		
end

rule "aula de sábado durante ou logo após viagem"
	when
		$turmaViagem : Turma($instrutor : instrutor != null, ehViagem)
		Turma(this != $turmaViagem, instrutor == $instrutor, aulasConflitamComViagens($turmaViagem))
	then
		scoreHolder.penalize(kcontext);
end 

rule "instrutor está restrito para a turma"
	when
		Turma($instrutor : instrutor != null, instrutorEstaRestrito($instrutor))
	then
		scoreHolder.penalize(kcontext);
end
